import os, chevron, json, logging, pprint

log_level = logging.INFO
logging.basicConfig(
    format='%(asctime)s [%(funcName)s:%(lineno)s] - %(levelname)s: %(message)s',
    datefmt='%d-%m-%y %H:%M:%S',
    level=log_level
    )
logger = logging.getLogger(__name__)
logger.setLevel(log_level)

class Constants: 
    home_dir = os.environ["HOME"] if "HOME" in os.environ else '/home/feedbot'
    config_file_name = 'feed2discord.local.ini'
    conf_file_path = os.path.join(home_dir, config_file_name)
    json_conf_path_dir = os.path.join('/config')

class Utils:
    def is_config_file_exist(dir_to_check):
        return os.path.exists(dir_to_check)
    def is_config_set_in_env():
        return True if "CONFIG" in os.environ else False

class DockerConfigBuilder:
    def __init__(self):
        self.json_conf_path_dir = Constants.json_conf_path_dir
        if Utils.is_config_file_exist(self.json_conf_path_dir) or Utils.is_config_set_in_env():
            self.config = self.parse_json_consig()
            self.render_all_conf()
            self.generate_config_files()
        else:
            raise Exception("You need to specify a JSON config file using volume or environment variables")

    def parse_json_consig(self):        
        config = {
            "token": "",
            "feeds": [],
            "debug": 2,
            "timezone": "utc",
            "publish": 0,
            "gameplayed": "Eating some RSS feeds",
            "skew-min": 1,
            "refresh-time": 1,
            "max-age": 86400,
            "one-send-typing": 1,
            "two-send-typing": 0,
        }    
        files_in_dir = os.listdir(self.json_conf_path_dir)
        
        for file in files_in_dir: 
            json_config_path = os.path.join(self.json_conf_path_dir, file)
            
            if os.path.isfile(json_config_path):
                json_config_content = open(json_config_path,'r').read()
                user_config = json.loads(json_config_content)
                
                for key, value in user_config.items():
                    config[key] = value
        
        for feed in config["feeds"]:
            if "fields" not in feed:
                feed["fields"] = "**title**,author,_published_,link,summary"
                
            if "name" not in feed:
                current_index = config["feeds"].index(feed)
                feed["name"] = f"feed-nÂ°-{str(current_index)}"
        return config       

    def render_feeds(self):
        all_feeds = ''
        
        for feed in self.config['feeds']:
            feeds_template = open('/opt/templates/feeds_template.ini', 'r')
            all_feeds += chevron.render(
                feeds_template, {
                    'feed_name': feed['name'],
                    'channel_id': feed['channel'],
                    'feed_url': feed['url'],
                    'fields': feed['fields'],
                })

        return all_feeds

    def render_all_conf(self):
        config_template = open('/opt/templates/config_template.ini', 'r')
        return chevron.render(
            config_template, {
                'debug': self.config['debug'],
                'timezone': self.config['timezone'],
                'login_token': self.config['token'],
                'db_path': "feed2discord.db",
                'publish': self.config['publish'],
                'gameplayed': self.config['gameplayed'],
                'start_skew_min': self.config['skew-min'],
                'rss_refresh_time': self.config['refresh-time'],
                'max_age': self.config['max-age'],
                'one_send_typing': self.config['one-send-typing'],
                'two_send_typing': self.config['two-send-typing'],
                'feeds': self.render_feeds(),
            }
        )

    def generate_config_files(self):
        with open(Constants.conf_file_path, 'w') as config_file:
            config_file.write(self.render_all_conf())    

if __name__ == "__main__":
    DockerConfigBuilder()